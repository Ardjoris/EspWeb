// Import required libraries
#include <FS.h>
#include <LittleFS.h>
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <C:\Librarys\wifiConnect.h>

const int ledPin = 2;
String ledState;

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// Replaces placeholder with LED state value
String processor(const String &var)
{
  Serial.println(var);
  if (var == "GPIO_STATE")
  {
    if (digitalRead(ledPin))
    {
      ledState = "OFF";
    }
    else
    {
      ledState = "ON";
    }
    Serial.print(ledState);
    return ledState;
  }
  return String();
}

void setup()
{

  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);

  // Initialize LittleFS
  if (!LittleFS.begin())
  {
    Serial.println();
    Serial.println("An Error has occurred while mounting LittleFS");
  }
  else
  {
    Serial.println("gelukt !");
  }
  

  WIFIConnect();

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
            { request->send(LittleFS, "data/index.html", String(), false, processor); });

  // Route to load style.css file
  server.on("/style.css", HTTP_GET, [](AsyncWebServerRequest *request)
            { request->send(LittleFS, "data/style.css", "text/css"); });

  // Route to set GPIO to HIGH
  server.on("/led2on", HTTP_GET, [](AsyncWebServerRequest *request)
            {
    digitalWrite(ledPin, LOW);    
    request->send(LittleFS, "/index.html", String(), false, processor); });

  // Route to set GPIO to LOW
  server.on("/led2off", HTTP_GET, [](AsyncWebServerRequest *request)
            {
    digitalWrite(ledPin, HIGH);    
    request->send(LittleFS, "/index.html", String(), false, processor); });

  // Start server
  server.begin();
}

void loop()
{
}
